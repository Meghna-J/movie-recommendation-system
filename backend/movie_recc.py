# -*- coding: utf-8 -*-
"""Movie Recommendation System

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XXY1FBDFyoEfEHYFDGWiNRWj_rO1wzwG
"""

import numpy as np
import pandas as pd
import difflib
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# loading the data from the csv file to apandas dataframe
movies_data = pd.read_csv('Dataset\movies - movies.csv')

# printing the first 5 rows of the dataframe
movies_data.head()

movies_data.shape

print(movies_data.columns)

# selecting the relevant features for recommendation

selected_features = ['genres','keywords','tagline','cast','director']
print(selected_features)

# replacing the null valuess with null string

for feature in selected_features:
  movies_data[feature] = movies_data[feature].fillna('')

# combining all the 5 selected features

combined_features = movies_data['genres']+' '+movies_data['keywords']+' '+movies_data['tagline']+' '+movies_data['cast']+' '+movies_data['director']

print(combined_features)

# converting the text data to feature vectors

vectorizer = TfidfVectorizer()

feature_vectors = vectorizer.fit_transform(combined_features)

# getting the similarity scores using cosine similarity

similarity = cosine_similarity(feature_vectors)

print(similarity)

print(similarity.shape)

# new_movies_data = movies_data.drop(columns=['budget','genres','homepage','id','keywords','original_language','original_title','overview','popularity','production_companies','production_countries','release_date','revenue','runtime','spoken_languages','status','tagline','vote_average','vote_count','cast','crew','director'])
new_movies_data = movies_data
new_movies_data['tags'] = combined_features
print(new_movies_data)

def reccomend(movie_name):
  # movie_name = input(' Enter your favourite movie name : ')

  list_of_all_titles = new_movies_data['title'].tolist()

  find_close_match = difflib.get_close_matches(movie_name, list_of_all_titles)

  close_match = find_close_match[0]

  index_of_the_movie = new_movies_data[new_movies_data.title == close_match]['index'].values[0]

  similarity_score = list(enumerate(similarity[index_of_the_movie]))

  sorted_similar_movies = sorted(similarity_score, key = lambda x:x[1], reverse = True) 

  print('Movies suggested for you : \n')

  i = 1
  movies_recc = []

  for movie in sorted_similar_movies:
    index = movie[0]
    title_from_index = new_movies_data[new_movies_data.index==index]['title'].values[0]
    # movies_recc = []
    if (i<30):
     # print(i, '.',title_from_index)
      print(title_from_index)
      movies_recc.append(title_from_index)
      i+=1
    movies_recc

# By calling recommend function
reccomend('avatar')

import pickle
pickle.dump(new_movies_data,open('models/movies_list.pkl','wb'))
pickle.dump(similarity,open('models/similarity.pkl','wb'))